{"version":3,"sources":["Components/loading.png","Components/Card.js","Components/Loader.js","Components/CardArray.js","Components/Scroll.js","Components/SearchBar.js","Components/Header.js","Containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","id","username","email","className","src","alt","Loader","style","paddingTop","loading","width","height","CardArray","loader","CardList","robots","map","name","length","Scroll","props","overflow","border","children","SearchBar","searchfield","searchChange","type","placeholder","onChange","Header","App","onSearch","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,qC,wLCc5BC,EAZF,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,GAAIC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,MACzB,OACI,yBAAKC,UAAW,uDACZ,yBAAKC,IAAG,+BAA0BJ,EAA1B,0BAAsDK,IAAI,UAClE,6BACI,4BAAMJ,GACN,2BAAKC,M,gBCENI,EAPA,WACX,OACI,yBAAKC,MAAO,CAACC,WAAY,SACrB,yBAAKL,UAAU,iBAAiBC,IAAKK,IAASJ,IAAI,GAAGK,MAAM,OAAOC,OAAO,WCyBtEC,EA3BG,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,OACVC,EAD8B,EAAZC,OACAC,KAAI,YAAwB,IAAtBhB,EAAqB,EAArBA,GAAIiB,EAAiB,EAAjBA,KAAMf,EAAW,EAAXA,MACpC,OAAO,kBAAC,EAAD,CAAMF,GAAKA,EAAIC,SAAagB,EAAOf,MAAUA,OAExD,OAAIW,EAAOK,QAAQ,EAEX,kBAAC,EAAD,MAGCJ,EAASI,QAAQ,EAElB,yBAAKX,MAAO,CAACC,WAAY,SACrB,yBAAKJ,IAAG,kDAAqDC,IAAI,UACjE,wBAAIF,UAAU,mBAAd,qBAMJ,yBAAKA,UAAU,MACVW,ICXFK,G,MAXA,SAACC,GACZ,OACI,yBACIb,MAAO,CAACc,SAAU,OACVC,OAAQ,kBACRX,OAAQ,UACXS,EAAMG,YCMRC,EAZG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKvB,UAAU,OACX,2BACIA,UAAU,mCACVwB,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCGXI,EATA,SAACV,GACZ,OACI,6BACI,wBAAIjB,UAAU,oBAAd,eACA,kBAAC,EAAD,CAAWuB,aAAiBN,EAAMM,iBCgC/BK,E,kDAhCX,aAAc,IAAD,8BACT,gBAWJC,SAAS,SAACC,GACN,EAAKC,SACD,CAACT,YAAaQ,EAAME,OAAOC,SAZ/B,EAAKC,MAAQ,CACTtB,OAAQ,GACRU,YAAa,IAJR,E,gEAOO,IAAD,OACfa,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAACnB,OAAQ2B,S,+BAOlC,IAAD,OACEC,EAAiBC,KAAKP,MAAMtB,OAAO8B,QAAO,SAAA9B,GAC5C,OAAOA,EAAOE,KAAK6B,cAAcC,SAAS,EAAKV,MAAMZ,YAAYqB,kBAErE,OACI,yBAAK3C,UAAY,MACb,kBAAC,EAAD,CAAQuB,aAAgBkB,KAAKZ,WAC7B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAWnB,OAAU+B,KAAKP,MAAMtB,OAAQA,OAAU4B,U,GA1BpDK,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.03f8e4c8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.3a9eb038.png\";","import React from 'react';\r\n\r\nconst Card = ({id, username, email}) => {\r\n    return (\r\n        <div className= 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?set=set2&size=200x200`} alt=\"<../>\"/>\r\n            <div>\r\n                <h2>{ username }</h2>\r\n                <p>{ email }</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport loading from './loading.png'\r\n\r\nconst Loader = ()=> {\r\n    return (\r\n        <div style={{paddingTop: '25vh'}}>\r\n            <img className='my-spin-loader' src={loading} alt=\"\" width='70px' height='70px'/>\r\n        </div>\r\n    )\r\n}\r\nexport default Loader;","import React from 'react';\r\nimport Card from './Card';\r\nimport Loader from './Loader';\r\n\r\nconst CardArray = ({loader, robots}) => {\r\n    const CardList = robots.map(({id, name, email}) => {\r\n        return <Card id={ id} username = { name } email = { email }/>\r\n    });\r\n    if (loader.length<=0) {\r\n        return (\r\n            <Loader />\r\n        )\r\n    }\r\n    else if (CardList.length<=0) {\r\n        return (\r\n            <div style={{paddingTop: '22vh'}}>\r\n                <img src={`https://robohash.org/test?set=set1&size=200x200`} alt=\"<../>\"/>\r\n                <h3 className='f2 myFont myRed'>No Results Found</h3>\r\n            </div>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <div className='tc'>\r\n                {CardList}\r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default CardArray;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div\r\n            style={{overflow: 'auto', \r\n                    border: '3px solid black', \r\n                    height: '800px'}}>\r\n                {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst SearchBar = ({searchfield, searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue' \r\n                type=\"search\" \r\n                placeholder='search robots'\r\n                onChange={searchChange}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport SearchBar from './SearchBar';\r\n\r\nconst Header = (props)=> {\r\n    return (\r\n        <div>\r\n            <h1 className='f1 myFont myBlue'>RoboFriends</h1>\r\n            <SearchBar searchChange = { props.searchChange }/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport CardArray from '../Components/CardArray';\r\nimport './App.css';\r\nimport Scroll from '../Components/Scroll';\r\nimport Header from '../Components/Header';\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n         .then(response => response.json())\r\n         .then(users => this.setState({robots: users}))\r\n    }\r\n    onSearch=(event)=>{\r\n        this.setState(\r\n            {searchfield: event.target.value}\r\n        )\r\n    }\r\n    render(){\r\n        const filteredRobots = this.state.robots.filter(robots => {\r\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n        })\r\n        return (\r\n            <div className = 'tc'>\r\n                <Header searchChange = {this.onSearch}/>\r\n                <Scroll>\r\n                    <CardArray loader = {this.state.robots} robots = {filteredRobots}/>\r\n                </Scroll>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}